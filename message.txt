uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iMouse;
uniform float iArgs[1];

const float EPSION = 0.1;
const float V_MIN = 0;
const float V_LOW = 0.25;
const float V_MED = 0.5;
const float V_HIGH = 0.75;
const float V_MAX = 1;

const float THRESHOLD_AREA = 800 * 600;
const float MIN_AREA = 400 * 100;
const float MIN_STRIP = 20;
const float MARGIN = 1;

float3 pixel(int x, int y, float2 xy) {
    return iChunk.eval(xy + float2(x, y)).rgb;
}

float3 sharpen(float2 xy) {
    float3 f =
        pixel(-1, -1, xy) *  1 +
        pixel( 0, -1, xy) * -1 +
        pixel( 1, -1, xy) *  1 +

        pixel(-1, 0, xy) * -1  +
        pixel( 0, 0, xy) * -1  +
        pixel( 1, 0, xy) * -1  +

        pixel(-1, 1, xy) * 1   +
        pixel( 0, 1, xy) * -1  +
        pixel( 1, 1, xy) * 1;
    return f / -1;
}

float4 RGX2(float2 xy) {
    float4 color = iChunk.eval(xy);

    if (iChunkSize.x * iChunkSize.y < MIN_AREA) {
        return color;
    }

    if (iChunkSize.y < MIN_STRIP || iChunkSize.x < MIN_STRIP) {
        return color;
    }

    if (xy.x < MARGIN || xy.x > (iChunkSize.x - MARGIN) ||
        xy.y < MARGIN || xy.y > (iChunkSize.y - MARGIN)) {
        return color;
    }

    return float4(sharpen(xy), 1);
}

float min3(float x, float y, float z) {
    return min(x, min(y, z));
}

float max3(float x, float y, float z) {
    return max(x, max(y, z));
}

float rcp(float v) {
    return 1 / v;
}

float3 RGX3(float2 xy, float strength) {
    float3 a = pixel(-1, -1, xy);
    float3 b = pixel( 0, -1, xy);
    float3 c = pixel( 1, -1, xy);

    float3 d = pixel(-1, 0, xy);
    float3 e = pixel( 0, 0, xy);
    float3 f = pixel( 1, 0, xy);

    float3 g = pixel(-1, 1, xy);
    float3 h = pixel( 0, 1, xy);
    float3 i = pixel( 1, 1, xy);

    float mnR = min3(min3(d.r, e.r, f.r), b.r, h.r);
    float mnG = min3(min3(d.g, e.g, f.g), b.g, h.g);
    float mnB = min3(min3(d.b, e.b, f.b), b.b, h.b);

    float mnR2 = min3(min3(mnR, a.r, c.r), g.r, i.r);
    float mnG2 = min3(min3(mnG, a.g, c.g), g.g, i.g);
    float mnB2 = min3(min3(mnB, a.b, c.b), g.b, i.b);

    mnR = mnR + mnR2;
    mnG = mnG + mnG2;
    mnB = mnB + mnB2;

    float mxR = max3(max3(d.r, e.r, f.r), b.r, h.r);
    float mxG = max3(max3(d.g, e.g, f.g), b.g, h.g);
    float mxB = max3(max3(d.b, e.b, f.b), b.b, h.b);

    float mxR2 = max3(max3(mxR, a.r, c.r), g.r, i.r);
    float mxG2 = max3(max3(mxG, a.g, c.g), g.g, i.g);
    float mxB2 = max3(max3(mxB, a.b, c.b), g.b, i.b);

    mxR = mxR + mxR2;
    mxG = mxG + mxG2;
    mxB = mxB + mxB2;

    float rcpMR = rcp(mxR);
    float rcpMG = rcp(mxG);
    float rcpMB = rcp(mxB);

    float ampR = saturate(min(mnR, 2 - mxR) * rcpMR);
    float ampG = saturate(min(mnG, 2 - mxG) * rcpMG);
    float ampB = saturate(min(mnB, 2 - mxB) * rcpMB);

    ampR = sqrt(ampR);
    ampG = sqrt(ampG);
    ampB = sqrt(ampB);

    float peak = -rcp(mix(8, 5, strength));

    float wR = ampR * peak;
    float wG = ampG * peak;
    float wB = ampB * peak;

    float rcpWeightR = rcp(1 + 4 * wR);
    float rcpWeightG = rcp(1 + 4 * wG);
    float rcpWeightB = rcp(1 + 4 * wB);

    return float3(
        saturate((b.r * wR + d.r * wR + f.r * wR + h.r * wR + e.r) * rcpWeightR),
        saturate((b.g * wG + d.g * wG + f.g * wG + h.g * wG + e.g) * rcpWeightG),
        saturate((b.b * wB + d.b * wB + f.b * wB + h.b * wB + e.b) * rcpWeightB));
}


float4 main(float2 xy) {

    float4 originalColor = iChunk.eval(xy);
    if (originalColor.a < 1) {
        return iChunk.eval(xy);
    }

    float intensity = iArgs[0];
    float strength = 0;
    float3 color;

    if (intensity < V_MIN + EPSION) {
        strength = 0.10;
        color = RGX3(xy, strength);

    } else if (intensity > V_LOW - EPSION && intensity < V_LOW + EPSION) {
        strength = 0.33;
        color = RGX3(xy, strength);

    } else if (intensity > V_MED - EPSION && intensity < V_MED + EPSION) {
        strength = 0.5;
        color = RGX3(xy, strength);

    } else if (intensity > V_HIGH - EPSION && intensity < V_HIGH + EPSION) {
        strength = 0.99;
        color = RGX3(xy, strength);

    } else if (intensity > V_MAX - EPSION) {
        strength = 1;
        color = RGX2(xy).rgb;
    }

    return float4(color, originalColor.a);
}